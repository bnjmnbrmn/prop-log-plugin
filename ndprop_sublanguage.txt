PROOF ::= PARAM_DELC '\n' ('\n' PROOF_ITEM)+ 

PARAM_DECL ::= 'Parameter ' atom_id '.'

PROOF_ITEM ::= SECTION | PROOF_LINE

SECTION ::= 
  'Section ' section_id '.\n' 
  'Hypothesis' line_id ':' FORMULA '.\n' 
  (PROOF_ITEM)*
  'End ' section_id '.'
  
PROOF_LINE ::= 'Fact ' line_id ' : ' FORMULA 
 '. Proof. apply (' JUSTIFICATION '). Qed.'
 
FORMULA ::= atom_id | '(' FORMULA '/\' FORMULA ')'| 
  '(' FORMULA ' \/ ' FORMULA ')'| 
  '(' FORMULA ' -> ' FORMULA ')' | '(~' FORMULA ')'

JUSTIFICATION ::= 
     'and_intro ' line_id line_id
   | 'and_elim_l ' line_id
   | 'and_elim_r ' line_id
   | 'or_intro_l ' line_id
   | 'or_intro_r ' line_id
   | 'or_elim ' line_id line_id line_id
   | 'impl_elim ' line_id line_id
   | 'false_elim ' line_id
   | 'not_not_elim ' line_id

====================================================

PROOF ::= 
    'Parameters ' (PROP_VAR)+ ' : Prop.\n\n' 
    (PROOF_ITEM(0))+.

PROOF_ITEM(n) ::=
    (SECTION(n) | PROOF_LINE(n))

SECTION(n) ::= 
    ('\t'){n} 'Section ' SECTION_ID '.\n'
    ('\t'){n+1} 'Hypothesis ' LINE_ID ' : ' FORMULA '.\n'
    (PROOF_ITEM(n+1))* '.\n'
    ('\t'){n} 'End ' SECTION_ID '.\n'

PROOF_LINE(n) ::= 
    ('\t'){n}'Fact ' LINE_ID ' : ' FORMULA '. Proof. apply (' JUSTIFICATION '). Qed.\n'

JUSTIFICATION ::= 
     'and_intro ' LINE_ID LINE_ID
   | 'and_elim_l ' LINE_ID
   | 'and_elim_r ' LINE_ID
   | 'or_intro_l ' LINE_ID
   | 'or_intro_r ' LINE_ID
   | 'or_elim ' LINE_ID LINE_ID LINE_ID
   | 'impl_elim ' LINE_ID LINE_ID
   | 'false_elim ' LINE_ID
   | 'not_not_elim ' LINE_ID

PROP_VAR ::=
    [a-zA-Z]* ' '